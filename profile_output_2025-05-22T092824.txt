Timer unit: 1e-09 s

Total time: 3.7367e-05 s
File: /home/ruben/Desktop/tesis/func_mod.py
Function: convertion_radians at line 13

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    13                                           @profile
    14                                           def convertion_radians(degree):
    15                                               ''' convertions degree to radians'''
    16         5      37367.0   7473.4    100.0      return np.deg2rad(degree)

Total time: 0.000527077 s
File: /home/ruben/Desktop/tesis/func_mod.py
Function: limbdarkening at line 18

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    18                                           @profile
    19                                           def limbdarkening(mu, u):
    20                                               '''Limb darkening lineal model'''
    21         1     527077.0 527077.0    100.0      return (1 - u * (1 - mu))

Total time: 0.00257446 s
File: /home/ruben/Desktop/tesis/func_mod.py
Function: spot_theta at line 23

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    23                                           @profile
    24                                           def spot_theta(days, initial_rad, spot_phi_rad, omega_eq, delta_omega, frame, total_frames):
    25                                               """
    26                                               Function to calculate the motion of the spots and the differential rotation
    27                                               Initial position of the spots.
    28                                               Parameters:
    29                                               -days
    30                                               - initial_deg: initial position of spot.
    31                                               - spot_phi_rad: latitud of spot(radians)
    32                                               - omega_eq: angular velocity.
    33                                               - delta_omega: difference between velocity in pole and equator.
    34                                               - frame: actual frame.
    35                                               - total_frames:.
    36                                               Returns:
    37                                               - theta in radians.
    38                                               """  
    39       246     418909.0   1702.9     16.3      delta_t = days/total_frame
    40       246     133974.0    544.6      5.2      time = frame * delta_t
    41                                           
    42                                               ##Differential Rotation
    43       246    1820991.0   7402.4     70.7      omega_phi = omega_eq - delta_omega * np.sin(spot_phi_rad)**2#---->sunlike star
    44       246      84653.0    344.1      3.3      delta_theta_d = omega_phi * time
    45       246     115929.0    471.3      4.5      return initial_rad + delta_theta_d

Total time: 0.226484 s
File: /home/ruben/Desktop/tesis/func_mod.py
Function: spot_mask at line 49

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    49                                           @profile
    50                                           def spot_mask(theta_mesh, spot_theta_rad, phi_mesh, spot_phi_rad, spot_radius_rad):
    51                                               '''function for creating spot mask, that could change the size and shape of the spot
    52                                               using a gaussian function
    53                                               '''
    54       246  151767063.0 616939.3     67.0      delta_theta = np.arccos(np.cos(theta_mesh - spot_theta_rad))
    55       246   18221979.0  74073.1      8.0      delta_phi = np.abs(phi_mesh - spot_phi_rad)
    56       246   27041549.0 109925.0     11.9      distance_squared = delta_theta**2 + delta_phi**2
    57       246     449328.0   1826.5      0.2      sigma_squared = (spot_radius_rad / 2)**2
    58       246   29003919.0 117902.1     12.8      return np.exp(-distance_squared / (2 * sigma_squared))

Total time: 520.348 s
File: /home/ruben/Desktop/tesis/func_mod.py
Function: animate at line 74

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    74                                           @profile
    75                                           def animate(i, gray_texture, mu, spot_theta_rad, spot_phi_rad, spot_radius_rad,
    76                                                       theta_mesh, phi_mesh, x, y, z, ax_sphere, elev, azim, ax_curve, line_curve, fluxes,
    77                                                       days, omega_eq, delta_omega, total_frame):
    78                                               """ Function where is created the motion and call functions"""
    79                                               
    80       246 3546889246.0    1e+07      0.7      ax_sphere.clear()
    81       246    1323139.0   5378.6      0.0      ax_sphere.set_axis_off()
    82       246    2527225.0  10273.3      0.0      ax_sphere.view_init(elev=elev, azim=azim)
    83                                           
    84       246   11241342.0  45696.5      0.0      texture = np.copy(gray_texture)
    85       246    6256372.0  25432.4      0.0      spot_theta_motion = spot_theta(days, spot_theta_rad, spot_phi_rad, omega_eq, delta_omega, i, total_frame)
    86       246  229796250.0 934131.1      0.0      spot_mask_motion = spot_mask(theta_mesh, spot_theta_motion, phi_mesh, spot_phi_rad, spot_radius_rad)
    87                                               
    88                                               #applying texture to the spot
    89       246   23073440.0  93794.5      0.0      texture *= (1 - 0.9 * spot_mask_motion)
    90                                               
    91                                               #plotting the surface
    92       246        5e+11    2e+09     99.2      surf = ax_sphere.plot_surface(x, y, z, rstride=1, cstride=1, facecolors=plt.cm.gray(texture), shade=False)
    93                                               
    94                                               #taking only visible part
    95       246  128618809.0 522840.7      0.0      visible = mu > 0
    96       246   29395652.0 119494.5      0.0      total_flux = np.sum(texture[visible])
    97       246     243509.0    989.9      0.0      fluxes.append(total_flux)
    98                                           
    99                                               #Normalized fluz for plot
   100       246  157852132.0 641675.3      0.0      fluxes_normalized = normalize([fluxes], norm="max")[0]
   101       246   17513656.0  71193.7      0.0      line_curve.set_data(np.arange(len(fluxes))*days/total_frame, fluxes_normalized)
   102                                           
   103       246    6771457.0  27526.2      0.0      print(f"Procesando frame {i+1}/{total_frame}", end='\r')
   104       246     118105.0    480.1      0.0      return [surf, line_curve]

  0.00 seconds - /home/ruben/Desktop/tesis/func_mod.py:13 - convertion_radians
  0.00 seconds - /home/ruben/Desktop/tesis/func_mod.py:18 - limbdarkening
  0.00 seconds - /home/ruben/Desktop/tesis/func_mod.py:23 - spot_theta
  0.23 seconds - /home/ruben/Desktop/tesis/func_mod.py:49 - spot_mask
520.35 seconds - /home/ruben/Desktop/tesis/func_mod.py:74 - animate
